import { loader } from 'webpack';
import { createInstrumenter } from 'istanbul-lib-instrument';
import { RawSourceMap } from 'source-map';
import { getConfig } from 'intern/lib/node/util';

/**
 * Instrument a source file with istanbul for code coverage.
 *
 * Instrumenter options will be read from the project 'intern.json' file.
 *
 * @param content the source code
 * @param sourceMap an optional source map
 */
export default <loader.Loader>function(
	content: string,
	sourceMap?: string | Buffer
) {
	const callback = this.async()!;
	const options = this.options;

	getConfig(options.config)
		.then(({ config, file }) => {
			// If a config file was successfully loaded, mark it as a dependency
			this.addDependency(file);
			return config;
		})
		.catch(_error => ({}))
		.then(config => {
			const instrumenterOptions = {
				produceSourceMap: true,
				...config.instrumenterOptions
			};

			if (config.coverageVariable) {
				instrumenterOptions.coverageVariable = config.coverageVariable;
			}

			const instrumenter = createInstrumenter(instrumenterOptions);
			let rawSourceMap: RawSourceMap | undefined;

			// For the code coverage to work we need to modify the sources in the
			// source map to point back to the original file. The files coming in have
			// been generated by webpack and look like,
			// "node_modules/tslint-loader?!path/to/file/css-modules!path/to/file.ts.
			// We need these files to simply be "path/to/file.ts".
			if (isRawSourceMap(sourceMap)) {
				rawSourceMap = sourceMap;
				sourceMap.sources = sourceMap.sources.map(source => {
					const lastBang = source.lastIndexOf('!');
					if (lastBang !== -1) {
						return source.substr(lastBang + 1);
					}
					return source;
				});
			}

			instrumenter.instrument(
				content,
				this.resourcePath,
				(error, instrumentedSource) => {
					if (error) {
						callback(error);
					} else {
						callback(
							null,
							instrumentedSource,
							JSON.stringify(instrumenter.lastSourceMap())
						);
					}
				},
				rawSourceMap
			);
		});
};

function isRawSourceMap(value: any): value is RawSourceMap {
	return value && value.sources != null;
}
